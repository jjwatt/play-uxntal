( devices )
|00 @System [ &vector $2 &pad $6 &r $2 &g $2 &b $2 ]
|20 @Screen [ &vector $2 &width $2 &height $2 &pad $2 &x $2 &y $2
	      &addr $2 &pixel $1 &sprite $1 ]
|10 @Console [ &vector $2 &read $1 &pad $5 &write $1 &error $1 ]
|c0 @DateTime   &year   $2 &month    $1 &day    $1 &hour   $1 &minute $1 &second  $1 &dotw    $1 &doty   $2 &isdst $1

( macros )
%ABS2 { DUP2 #0f SFT2 EQU #05 JCN #0000 SWP2 SUB2 }
%LTS2  { #8000 ADD2 SWP2 #8000 ADD2 GTH2 }
%GTS2  { #8000 ADD2 SWP2 #8000 ADD2 LTH2 }
%WIDTH { #0100 } %HEIGHT { #00a0 }
%MOD { DUP2 DIV MUL SUB } ( a b -- a%b )
%MOD2 { OVR2 OVR2 DIV2 MUL2 SUB2 } ( a b -- a%b )
%HALF { #01 SFT } ( number -- number/2 )
%HALF2 { #01 SFT2 } (number -- number/2 )
%X-CENTER { .Screen/width DEI2 HALF2 } ( -- width )
%Y-CENTER { .Screen/height DEI2 HALF2 } ( -- height )
%BREAKPOINT { #010e DEO }
( Variables in zero-page )
|00
@color [ &byte $1 ]
@triangle [ &x1 $2 &x2 $2 &x3 $2 &y1 $2 &y2 $2 &y3 $2 ]
@initialp [ &x $2 &y $2 ]
@pixel [ &x $2 &y $2 ]
@rand $2

( init )
|0100

	( set system colors )
	#2ce9 .System/r DEO2
	#01c0 .System/g DEO2
	#2ce5 .System/b DEO2

	( #0280 .Screen/width DEO2 )
	( #01e0 .Screen/height DEO2 )
	( default seems to be 512x320 )

	( set initial x,y coords )
	X-CENTER .pixel/x STZ2
	Y-CENTER .pixel/y STZ2

	( first triangle )
	#0000 .triangle/x1 STZ2
	#0000 .triangle/y1 STZ2
	.Screen/width DEI2
		#01 SFT2 .triangle/x2 STZ2
	.Screen/height DEI2 .triangle/y2 STZ2
	.Screen/width DEI2 .triangle/x3 STZ2
	#0000 .triangle/y3 STZ2
	( .triangle/y2 LDZ2 pdec )
	( ;pblank JSR2 )
	( .triangle/x1 #01 ADD <phex> )
	( ;pblank JSR2 )
	( .triangle <phex> )
	( ;pblank JSR2 )
	( .triangle/x2 LDZ2 <phex> )
	( pblank )
	( .triangle #04 ADD LDZ2 <phex> ( 2 bytes ) )
	( pblank )
	( set screen vector )

	;on-frame .Screen/vector DEO2
	( pause exec debug port )
	prng-init
	draw-points
BRK
@draw-points ( -- )
	.pixel/x LDZ2 .Screen/x DEO2
	.pixel/y LDZ2 .Screen/y DEO2
	#01 .Screen/pixel DEO

	prng .rand STZ POP
	.rand LDZ #08 MOD
	.triangle ADD LDZ2 .pixel/x LDZ2 ADD2 #01 SFT2
	( BREAKPOINT )
	.pixel/x STZ2
	.rand LDZ #08 MOD .triangle ADD #10 SFT LDZ2 .pixel/y LDZ2 ADD2 #01 SFT2
	( BREAKPOINT )
	.pixel/y STZ2

	.pixel/x LDZ2 .Screen/x DEO2
	.pixel/y LDZ2 .Screen/y DEO2
	#01 .Screen/pixel DEO

	( .pixel/x LDZ2 .triangle .rand LDZ2 ADD LDZ2 print pblank )
	( .pixel/y LDZ2 .triangle .rand LDZ2 ADD LDZ2 .pixel/y STZ2 )
	( .pixel/x LDZ2 )
	( 	.rand LDZ2 .triangle ADD LDZ2 .pixel/x STZ2 )
	( .pixel/y LDZ2 )
	( 	.rand LDZ2 .triangle ADD #02 ADD LDZ2 .pixel/y STZ2 )

	( .pixel/x LDZ2 print pblank )
	( .pixel/y LDZ2 print pblank )

	( .pixel/x LDZ2 .Screen/x DEO2 )
	( .pixel/y LDZ2 .Screen/y DEO2 )
	( #01 .Screen/pixel )
	( it is randomly drawing one of the three but i think it's still the same 3 )
	( need to change the x,y to be the new points )
	(-probably need a recursive loop )
	( 1. choose starting x, y initialp )
	( 2. randomly select a vertex )
	( 3. move halfway between initialp and vertex )
	( 4. plot that point )
	( 5. make that point initialp i think )
JMP2r
@on-frame ( -> )
	draw-points
	( load x,y coords from zero page and send to screen device )
	( draw-points )
	( .pixel/x LDZ2 .Screen/x DEO2 )
	( .pixel/y LDZ2 .Screen/y DEO2 )
	( #01 .Screen/pixel DEO )

	( .triangle/x1 LDZ2 .Screen/x DEO2 )
	( .triangle/y1 LDZ2 .Screen/y DEO2 )
	( #01 .Screen/pixel DEO )

	( .triangle/x2 LDZ2 .Screen/x DEO2 )
	( .triangle/y2 LDZ2 .Screen/y DEO2 )
	( #01 .Screen/pixel DEO )

	( .triangle/x3 LDZ2 .Screen/x DEO2 )
	( .triangle/y3 LDZ2 .Screen/y DEO2 )
	( #01 .Screen/pixel DEO )
	( increment pixel/x )
	( .pixel/x LDZ2 INC2 .pixel/x STZ2 )
BRK

@pblank ( -- )
	{ 0a 00 }
	STH2r
	&wa ( -- )
		LDAk .Console/write DEO
		INC2 LDAk ?&wa
	POP2
JMP2r

@print-dec ( dec -- )
	DUP #64 DIV print-num/try
	DUP #0a DIV print-num/try
	( >> )

@print-num ( num -- )
	#0a DIVk MUL SUB [ LIT "0 ] ADD #18 DEO
	JMP2r
	&try ( num -- )
		DUP ?print-num
		POP JMP2r
@pdec ( short* -- )
	#2710 [ LIT2r 00fb ]
	&w ( -- )
		DIV2k #000a DIV2k MUL2 SUB2 SWPr EQUk OVR STHkr EQU AND ?{
			DUP [ LIT "0 ] ADD #19 DEO
			INCr }
		POP2 #000a DIV2 SWPr INCr STHkr ?&w
	POP2r POP2 POP2 JMP2r

@<phex> ( short* -: )
	SWP /b
	&b ( byte -: )
		DUP #04 SFT /c
	&c ( byte -: )
		#0f AND DUP #09 GTH #27 MUL ADD [ LIT "0 ] ADD #18 DEO
		JMP2r

@pstr-inline-loop

	[ LITr 18 ] DEOr INC2r

@pstr-inline ( -- | retaddr -- )
	LDAkr DUPr [ LITr _pstr-inline-loop ] JCNr
	POPr INC2r
JMP2r

@print ( short* -- )
	SWP ,&byte JSR
	&byte ( byte -- ) DUP #04 SFT ,&char JSR
	&char ( char -- ) #0f AND DUP #09 GTH #27 MUL ADD #30 ADD #18 DEO
JMP2r

@print-str ( str* -- )
	&while
		LDAk #18 DEO
		INC2 LDAk ,&while JCN
	POP2
JMP2r

@prng-init ( -- )
	[ LIT2 00 -DateTime/second ] DEI
		[ LIT2 00 -DateTime/minute ] DEI #60 SFT2 EOR2
		[ LIT2 00 -DateTime/hour ] DEI #c0 SFT2 EOR2 ,prng/x STR2
	[ LIT2 00 -DateTime/hour ] DEI #04 SFT2
		[ LIT2 00 -DateTime/day ] DEI #10 SFT2 EOR2
		[ LIT2 00 -DateTime/month ] DEI #60 SFT2 EOR2
		.DateTime/year DEI2 #a0 SFT2 EOR2 ,prng/y STR2
JMP2r

@prng ( -- number* )
	[ LIT2 &x $2 ]
		DUP2 #50 SFT2 EOR2
		DUP2 #03 SFT2 EOR2
	[ LIT2 &y $2 ] DUP2 ,&x STR2
		DUP2 #01 SFT2 EOR2 EOR2
		,&y STR2k POP
JMP2r
